{"ast":null,"code":"import * as types from './ActionTypes';\n\nfunction url() {\n  return 'www.url.com';\n}\n\nexport function receiveUser(json) {\n  return {\n    type: types.RECEIVE_USER,\n    user: json.user\n  };\n}\nexport function fetchUser() {\n  return dispatch => {\n    return fetch(url(), {\n      method: 'GET',\n      mode: 'cors',\n      credentials: 'include',\n      headers: {\n        'x-api-key': 'apiKey',\n        'Accept': 'application/json'\n      }\n    }).then(response => response.json()).then(json => dispatch(receiveUser(json)));\n  };\n}","map":{"version":3,"sources":["C:/Users/Dell/Desktop/project_01/project_01_front-end/src/actions/UserActions.js"],"names":["types","url","receiveUser","json","type","RECEIVE_USER","user","fetchUser","dispatch","fetch","method","mode","credentials","headers","then","response"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;;AAEA,SAASC,GAAT,GAAe;AACX,SAAO,aAAP;AACH;;AAED,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAC9B,SAAO;AAACC,IAAAA,IAAI,EAAEJ,KAAK,CAACK,YAAb;AAA2BC,IAAAA,IAAI,EAAGH,IAAI,CAACG;AAAvC,GAAP;AACH;AAED,OAAO,SAASC,SAAT,GAAqB;AACxB,SAAOC,QAAQ,IAAI;AACf,WAAOC,KAAK,CAACR,GAAG,EAAJ,EAAQ;AAChBS,MAAAA,MAAM,EAAE,KADQ;AAEhBC,MAAAA,IAAI,EAAE,MAFU;AAGhBC,MAAAA,WAAW,EAAE,SAHG;AAIhBC,MAAAA,OAAO,EAAE;AACL,qBAAa,QADR;AAEL,kBAAU;AAFL;AAJO,KAAR,CAAL,CASFC,IATE,CASGC,QAAQ,IAAIA,QAAQ,CAACZ,IAAT,EATf,EAUFW,IAVE,CAUGX,IAAI,IAAIK,QAAQ,CAACN,WAAW,CAACC,IAAD,CAAZ,CAVnB,CAAP;AAWH,GAZD;AAaH","sourcesContent":["import * as types from './ActionTypes';\r\n\r\nfunction url() {\r\n    return 'www.url.com';\r\n}\r\n\r\nexport function receiveUser(json) {\r\n    return {type: types.RECEIVE_USER, user : json.user};\r\n}\r\n\r\nexport function fetchUser() {\r\n    return dispatch => {\r\n        return fetch(url(), {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            credentials: 'include',\r\n            headers: {\r\n                'x-api-key': 'apiKey',\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => dispatch(receiveUser(json)));\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}